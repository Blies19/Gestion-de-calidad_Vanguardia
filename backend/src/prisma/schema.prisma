generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id_usuario    String  @id @default(uuid())
  nombre        String
  apellido      String
  email         String  @unique
  password_hash String
  rol           Rol
  fecha_registro DateTime @default(now())
  activo        Boolean @default(true)

  proyectos     Proyecto[] @relation("ResponsableProyectos")
  documentos    Documento[]
  reportes      Reporte[]
  notificaciones Notificacion[]
  comentarios   ComentarioDocumento[]
  historial     HistorialCambios[]
}

model Proyecto {
  id_proyecto  String  @id @default(uuid())
  nombre       String
  descripcion  String?
  tipo         TipoProyecto
  fecha_inicio DateTime
  fecha_fin    DateTime?
  estado       EstadoProyecto
  id_responsable String

  responsable  Usuario  @relation("ResponsableProyectos", fields: [id_responsable], references: [id_usuario])
  documentos   Documento[]
  etapas       EtapaProyecto[]
}

model Documento {
  id_documento    String @id @default(uuid())
  nombre          String
  tipo_documento  TipoDocumento
  ruta_archivo    String
  fecha_subida    DateTime @default(now())
  id_proyecto     String
  id_autor        String
  estado_validacion EstadoValidacion

  proyecto       Proyecto @relation(fields: [id_proyecto], references: [id_proyecto])
  autor          Usuario  @relation(fields: [id_autor], references: [id_usuario])
  comentarios    ComentarioDocumento[]
}

model Reporte {
  id_reporte       String @id @default(uuid())
  nombre           String
  fecha_generacion DateTime @default(now())
  id_generador     String
  tipo_reporte     TipoReporte
  contenido_json   Json

  generador        Usuario @relation(fields: [id_generador], references: [id_usuario])
}

model Notificacion {
  id_notificacion String @id @default(uuid())
  id_usuario      String
  mensaje         String
  fecha_envio     DateTime @default(now())
  estado          EstadoNotificacion

  usuario         Usuario @relation(fields: [id_usuario], references: [id_usuario])
}

model EtapaProyecto {
  id_etapa     String @id @default(uuid())
  nombre       String
  descripcion  String?
  orden        Int
  id_proyecto  String

  proyecto     Proyecto @relation(fields: [id_proyecto], references: [id_proyecto])
}

model ComentarioDocumento {
  id_comentario  String @id @default(uuid())
  contenido      String
  fecha_creacion DateTime @default(now())
  id_documento   String
  id_autor       String

  documento      Documento @relation(fields: [id_documento], references: [id_documento])
  autor         Usuario  @relation(fields: [id_autor], references: [id_usuario])
}

model HistorialCambios {
  id_historial     String @id @default(uuid())
  entidad_afectada EntidadAfectada
  id_entidad       String
  accion           TipoAccion
  fecha_cambio     DateTime @default(now())
  id_usuario       String

  usuario          Usuario @relation(fields: [id_usuario], references: [id_usuario])
}

enum Rol {
  Admin
  Investigador
  Auditor
}

enum TipoProyecto {
  Interno
  Externo
}

enum EstadoProyecto {
  En_curso
  Finalizado
  Cancelado
}

enum TipoDocumento {
  PDF
  Word
  Excel
  Otro
}

enum EstadoValidacion {
  Pendiente
  Aprobado
  Rechazado
}

enum TipoReporte {
  Documentos_faltantes
  Documentos_aprobados
  Progreso_de_proyectos
}

enum EstadoNotificacion {
  Leido
  No_leido
}

enum EntidadAfectada {
  Proyecto
  Documento
  Reporte
}

enum TipoAccion {
  Creacion
  Actualizacion
  Eliminacion
}
